package io.appform.databuilderframework.engine;

import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import io.appform.databuilderframework.model.*;
import lombok.extern.slf4j.Slf4j;
import lombok.val;

import java.util.HashMap;
import java.util.List;
import java.util.Objects;

/**
 * The executor for a {@link io.appform.databuilderframework.model.DataFlow}.
 */
@Slf4j
public abstract class DataFlowExecutor {
    protected List<DataBuilderExecutionListener> dataBuilderExecutionListener;
    private final DataBuilderFactory dataBuilderFactory;

    protected DataFlowExecutor(DataBuilderFactory dataBuilderFactory) {
        this.dataBuilderExecutionListener = Lists.newArrayList();
        this.dataBuilderFactory = dataBuilderFactory;
    }

    /**
     * The executor will use the builder factory in the DataFlow.
     */
    protected DataFlowExecutor() {
        this.dataBuilderExecutionListener = Lists.newArrayList();
        this.dataBuilderFactory = null;
    }

    /**
     * Execute a data flow built using {@link io.appform.databuilderframework.engine.DataFlowBuilder}.
     * This should be used when using the framework in single request context.
     *
     * @param dataFlow A data-flow built using {@link io.appform.databuilderframework.engine.DataFlowBuilder}.
     * @param data     The {@link io.appform.databuilderframework.model.Data} objects to be used as input to execute this flow.
     * @return A response containing responses from every {@link DataBuilder}
     * @throws DataBuilderFrameworkException if builder could not be instantiated
     */
    public DataExecutionResponse run(
            final DataFlow dataFlow,
            Data... data) throws DataBuilderFrameworkException, DataValidationException {
        return run(dataFlow, new DataDelta(data));
    }

    /**
     * Execute a data flow built using {@link io.appform.databuilderframework.engine.DataFlowBuilder}.
     * This should be used when using the framework in single request context.
     *
     * @param dataFlow  A data-flow built using {@link io.appform.databuilderframework.engine.DataFlowBuilder}.
     * @param dataDelta A {@link io.appform.databuilderframework.model.DataDelta} of objects to be used as input to execute this flow.
     * @return A response containing responses from every {@link DataBuilder}.
     * @throws DataBuilderFrameworkException if builder could not be instantiated
     */
    public DataExecutionResponse run(
            final DataFlow dataFlow,
            DataDelta dataDelta) throws DataBuilderFrameworkException, DataValidationException {
        Objects.requireNonNull(dataFlow);
        Preconditions.checkArgument(null != dataFlow.getDataBuilderFactory() || null != dataBuilderFactory);
        return process(new DataBuilderContext(),
                       new DataFlowInstance(),
                       dataDelta,
                       dataFlow,
                       dataFlow.getDataBuilderFactory());
    }

    /**
     * It uses {@link io.appform.databuilderframework.model.Data} present in the existing
     * {@link io.appform.databuilderframework.model.DataSet} and those provided by
     * {@link io.appform.databuilderframework.model.DataDelta} to generate more data.
     * Non-transient {@link io.appform.databuilderframework.model.Data} generated by all executors invoked in a request
     * are registerd back into the {@link io.appform.databuilderframework.model.DataSet}
     *
     * @param dataFlowInstance An instance of the {@link io.appform.databuilderframework.model.DataFlow} to run.
     * @param data             The additional set of data to be considered for execution.
     * @return A response containing responses from every {@link DataBuilder}
     * that was invoked in this stage. Note that these have already been added to the DataSet before returning.
     * @throws DataBuilderFrameworkException if builder could not be instantiated
     */
    public DataExecutionResponse run(
            DataFlowInstance dataFlowInstance,
            Data... data) throws DataBuilderFrameworkException, DataValidationException {
        return run(dataFlowInstance, new DataDelta(data));
    }

    /**
     * It uses {@link io.appform.databuilderframework.model.Data} present in the existing
     * {@link io.appform.databuilderframework.model.DataSet} and those provided by
     * {@link io.appform.databuilderframework.model.DataDelta} to generate more data.
     * Non-transient {@link io.appform.databuilderframework.model.Data} generated by all executors invoked in a request
     * are registerd back into the {@link io.appform.databuilderframework.model.DataSet}
     *
     * @param dataFlowInstance An instance of the {@link io.appform.databuilderframework.model.DataFlow} to run.
     * @param dataDelta        The additional set of data to be considered for execution.
     * @return A response containing responses from every {@link DataBuilder}
     * that was invoked in this stage. Note that these have already been added to the DataSet before returning.
     * @throws DataBuilderFrameworkException if builder could not be instantiated
     */
    public DataExecutionResponse run(
            DataFlowInstance dataFlowInstance,
            DataDelta dataDelta) throws DataBuilderFrameworkException, DataValidationException {
        return run(DataBuilderContext.builder()
                           .dataSet(dataFlowInstance.getDataSet())
                           .contextData(new HashMap<>())
                           .build(),
                   dataFlowInstance,
                   dataDelta);
    }

    /**
     * It uses {@link io.appform.databuilderframework.model.Data} present in the existing
     * {@link io.appform.databuilderframework.model.DataSet} and those provided by
     * {@link io.appform.databuilderframework.model.DataDelta} to generate more data.
     * {@link io.appform.databuilderframework.model.Data} generated by all executors invoked in a request
     * are registerd back into the {@link io.appform.databuilderframework.model.DataSet}
     *
     * @param dataBuilderContext An instance of the {@link io.appform.databuilderframework.engine.DataBuilderContext} object.
     * @param dataFlowInstance   An instance of the {@link io.appform.databuilderframework.model.DataFlow} to run.
     * @param dataDelta          The set of data to be considered for analysis.
     * @return A response containing responses from every {@link DataBuilder}
     * that was invoked in this stage. Note that these have already been added to the DataSet before returning.
     * @throws DataBuilderFrameworkException if builder could not be instantiated
     */
    public DataExecutionResponse run(
            DataBuilderContext dataBuilderContext,
            DataFlowInstance dataFlowInstance,
            DataDelta dataDelta) throws DataBuilderFrameworkException, DataValidationException {
        val dataFlow = dataFlowInstance.getDataFlow();
        Preconditions.checkArgument(null != dataFlow.getDataBuilderFactory()
                                            || null != dataBuilderFactory);
        val existingFactory = dataFlow.getDataBuilderFactory();
        val builderFactory = null != existingFactory
                             ? existingFactory
                             : dataBuilderFactory;
        if (null == builderFactory) {
            throw new DataBuilderFrameworkException(DataBuilderFrameworkException.ErrorCode.NO_FACTORY_FOR_DATA_BUILDER,
                                                    "No builder specified in contructor or dataflow");
        }
        return process(dataBuilderContext, dataFlowInstance, dataDelta, dataFlow, builderFactory);
    }

    protected DataExecutionResponse process(
            DataBuilderContext dataBuilderContext,
            DataFlowInstance dataFlowInstance,
            DataDelta dataDelta,
            DataFlow dataFlow,
            DataBuilderFactory builderFactory) throws DataBuilderFrameworkException, DataValidationException {
        DataExecutionResponse response = null;
        Throwable frameworkException = null;
        try {
            executePreListeners(dataBuilderContext, dataFlowInstance, dataDelta);
            response = run(dataBuilderContext, dataFlowInstance, dataDelta, dataFlow, builderFactory);
            return response;
        }
        catch (DataBuilderFrameworkException e) {
            frameworkException = e;
            throw e;
        }
        finally {
            executePostListeners(dataBuilderContext, dataFlowInstance, dataDelta, response, frameworkException);
        }
    }

    protected abstract DataExecutionResponse run(
            DataBuilderContext dataBuilderContext,
            DataFlowInstance dataFlowInstance,
            DataDelta dataDelta,
            DataFlow dataFlow,
            DataBuilderFactory builderFactory) throws DataBuilderFrameworkException, DataValidationException;

    /**
     * A instance of {@link io.appform.databuilderframework.engine.DataBuilderExecutionListener}
     * that will be sent events when a builder is executed. This can be called multiple times with different listeners.
     * They will be called in order.
     *
     * @param listener Register a listener to be invoked during execution.
     * @return The executor itself for chaining
     */
    public DataFlowExecutor registerExecutionListener(DataBuilderExecutionListener listener) {
        dataBuilderExecutionListener.add(listener);
        return this;
    }

    private void executePreListeners(
            DataBuilderContext dataBuilderContext,
            DataFlowInstance dataFlowInstance,
            DataDelta dataDelta) throws DataBuilderFrameworkException {
        for (DataBuilderExecutionListener listener : dataBuilderExecutionListener) {
            try {
                listener.preProcessing(dataBuilderContext, dataFlowInstance, dataDelta);
            }
            catch (Throwable t) {
                if (listener.shouldThrowException()) {
                    throw new DataBuilderFrameworkException(DataBuilderFrameworkException.ErrorCode.PRE_PROCESSING_ERROR,
                                                            "Error running pre-processing listener: " + t.getMessage(),
                                                            t);
                }
                log.error("Error running pre-processing listener: ", t);
            }
        }
    }

    private void executePostListeners(
            DataBuilderContext dataBuilderContext,
            DataFlowInstance dataFlowInstance,
            DataDelta dataDelta,
            DataExecutionResponse response,
            Throwable frameworkException) throws DataBuilderFrameworkException {
        for (DataBuilderExecutionListener listener : dataBuilderExecutionListener) {
            try {
                listener.postProcessing(dataBuilderContext,
                                        dataFlowInstance,
                                        dataDelta,
                                        response,
                                        frameworkException);
            }
            catch (Throwable t) {
                if (listener.shouldThrowException()) {
                    throw new DataBuilderFrameworkException(DataBuilderFrameworkException.ErrorCode.POST_PROCESSING_ERROR,
                                                            "Error running post-processing listener: " + t.getMessage(),
                                                            t);
                }
                log.error("Error running post-processing listener: ", t);

            }
        }
    }
}
