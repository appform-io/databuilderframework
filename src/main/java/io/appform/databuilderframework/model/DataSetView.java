package io.appform.databuilderframework.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.Predicates;
import com.google.common.base.Strings;
import com.google.common.collect.Maps;
import io.appform.databuilderframework.engine.DataSetAccessor;
import io.appform.databuilderframework.engine.Utils;
import lombok.val;
import org.hibernate.validator.constraints.NotEmpty;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.StampedLock;
import java.util.function.Supplier;

/**
 * Working set for data
 * Contains all the data that has been provided by the system as well as those generated by the system.
 */
public class DataSetView extends DataSet {

    private final DataSet dataSet;
    private final Set<String> allowedKeys;

    public DataSetView(final DataSet dataSet,
                       final Set<String> allowedKeys) {
        this.dataSet = dataSet;
        this.allowedKeys = allowedKeys;
    }

    public DataSetView add(String dataName, Data data) {
        throw new UnsupportedOperationException();
    }

    public DataSetView add(final Collection<Data> data) {
        throw new UnsupportedOperationException();
    }

    public <T extends Data> DataSetView add(T data) {
        throw new UnsupportedOperationException();
    }

    public Map<String, Data> filter(final Collection<String> requiredKeys) {
        throw new UnsupportedOperationException();
    }

    public Data get(final String name) {
        if (allowedKeys.contains(name)) {
            return dataSet.get(name);
        }
        return null;
    }

    public boolean containsAll(final Collection<String> requiredKeys) {
        // TODO Fix this. Should requiredKeys be filtered on allowedKeys ???
        return dataSet.containsAll(requiredKeys);
    }

    public void copyInto(final Map<String, Data> outMap, Collection<String> excludedKeys) {
        throw new UnsupportedOperationException();
    }

    public DataSetAccessor accessor() {
        return accessor(this);
    }

}
